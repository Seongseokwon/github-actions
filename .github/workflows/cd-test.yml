name: Deploy

on:
  workflow_dispatch:
    inputs:
      branch:
        description: |
          [필수] 배포할 환경 선택(main, dev)
        required: true
        default: dev
        type: choice
        options:
          - main
          - dev
      version:
        description: |
          버전 선택(major, minor, patch)
        default: patch
        required: false
        type: choice
        options:
          - major
          - minor
          - patch

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: deepvue/dev/display-frontend
  ECS_SERVICE: deepvue-display-dev-fe-service
  ECS_CLUSTER: deepvue-display-dev-cluster
  ECS_TASK_DEFINITION: .github/workflows/deepvue-display-dev-fe-task-revision1.json
  CONTAINER_NAME: deepvue-display-dev-fe-container
  BUILD_ENV: development

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check Repository
        uses: actions/checkout@v4
        with:
          ref: ${{github.event.inputs.branch}}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 배포 브랜치 확인
        id: env
        run: |
          current_branch=${{github.event.inputs.branch}}
          echo "current_branch=$current_branch" >> $GITHUB_OUTPUT

      - name: 배포 환경설정
        run: |
          echo "선택된 브랜치: ${{steps.env.outputs.current_branch}}"
          branch=${{steps.env.outputs.current_branch}}
          if [ $branch = "main" ]; then
            echo "ECR_REPOSITORY='deepvue/prod/display-frontend'" >> $GITHUB_ENV
            echo "ECS_SERVICE='deepvue-display-prod-fe-service'" >> $GITHUB_ENV
            echo "ECS_CLUSTER='deepvue-display-prod-cluster'" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION='.github/workflows/deepvue-display-prod-fe-task-revision1.json'" >> $GITHUB_ENV
            echo "CONTAINER_NAME='deepvue-display-prod-fe-container'" >> $GITHUB_ENV
            echo "BUILD_ENV='production'" >> $GITHUB_ENV
          fi
      - name: 버전
        id: version_check
        run: |
          LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: 버전 확인
        id: version
        run: |
          echo "버전 확인 ${{steps.version_check.outputs.LATEST_VERSION}}"

          IFS='.' read -r MAJOR MINOR PATCH <<< ${{steps.version_check.outputs.LATEST_VERSION}}
          deploy_version_type=${{github.event.inputs.version}}

          if [$deploy_version_type = "major"]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [$deploy_version_type = "minor"]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          elif [$deploy_version_type = "patch"]; then
            NEW_VERSION="$MAJOR.$MINOR.PATCH"
          fi

          # 나중 단계에서, NEW_VERSION을 활용해서 태그를 생성하는데, 기존버전과 동일하면 생성하지 않는다.
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 환경확인
        run: |
          echo "AWS_REGION: ${{ env.AWS_REGION }}"
          echo "ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}"
          echo "ECS_SERVICE: ${{ env.ECS_SERVICE }}"
          echo "ECS_CLUSTER: ${{ env.ECS_CLUSTER }}"
          echo "ECS_TASK_DEFINITION: ${{ env.ECS_TASK_DEFINITION }}"
          echo "CONTAINER_NAME: ${{ env.CONTAINER_NAME }}"
          echo "BUILD_ENV: ${{ env.BUILD_ENV }}"
          echo "NEW_VERSION": ${{steps.version.outputs.NEW_VERSION}}
